amqp:
  admin:
    auto-create: ${amqp.admin_auto-create}
  queues:
    video-created:
      exchange: video.events
      routing-key: video.created
      queue: video.created.queue # unnecessary
    video-encoded:
      exchange: video.events
      routing-key: video.encoded
      queue: video.encoded.queue # unnecessary

google:
  cloud:
    credentials: ${GOOGLE_CLOUD_CREDENTIALS}
    project-id: ${GOOGLE_CLOUD_PROJECT}
    storage:
      catalogo-videos:
        bucket: sysm_catalogo_videos
        connect-timeout: 500
        read-timeout: 5000
        retry-delay: 50
        retry-max-delay: 50
        retry-max-attempts: 2
        retry-multiplier: 1.0

server:
  port: ${spring.server_port}
  compression:
    enabled: true                                           # Whether response compression is enabled.
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json # Comma-separated list of MIME types that should be compressed.
    min-response-size: 1024                                 # Minimum "Content-Length" value that is required for compression to be performed.
  undertow:
    threads:
      worker: ${spring.undertow_threads_worker}             # Generally this should be reasonably high, at least 10 per CPU core: https://undertow.io/undertow-docs/undertow-docs-2.1.0/index.html#listeners-2
      io: ${spring.undertow_threads_io}                     # One IO thread per CPU core is a reasonable default: https://undertow.io/undertow-docs/undertow-docs-2.1.0/index.html#listeners-2

spring:
  flyway:
    enabled: ${spring.flyway_enable}
  datasource:
    url: ${database.url}
    username: ${database.username}
    password: ${database.password}
    hikari:                   # responsavel por gerenciar o pool
      auto-commit: false
      connection-timeout: 250 # É uma configuração em milliseconds. O ideal é manter baixo para que estoure timeout logo e não prenda as threads.
      max-lifetime: 600000    # Tempo máximo que uma conexão pode ficar aberta (10 min) - security.
      maximum-pool-size: 20   # Mantemos até no máx 20 conexões com o banco de dados. O ideal é manter baixo mesmo, pois é algo custoso para o banco gerenciar. https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
      minimum-idle: 10
      pool-name: master
  jpa:
    open-in-view: false
    show-sql: ${spring.jpa_show_sql}
    hibernate:
      ddl-auto: ${spring.jpa_hibernate_ddl_auto}
    properties:
      "[hibernate.dialect]": org.hibernate.dialect.MySQL8Dialect
      "[hibernate.generate_statistics]": false
      "[hibernate.connection.provider_disables_autocommit]": true
      # Para aumentar a performance ao máximo, desabilitamos o auto-commit e o open-in-view.
      # https://vladmihalcea.com/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/
  rabbitmq:
    dynamic: ${amqp.admin.auto-create}
    host: ${amqp.host}
    port: ${amqp.port}
    username: ${amqp.username}
    password: ${amqp.password}
  servlet:
    multipart:
      max-file-size: 10GB
      max-request-size: 100GB
  security:
    oauth2:
      resourceserver:
        jwt:
          # Spring on start get the Keycloak public certificates and put it in cache,
          # and each request check if the token is signed and its signature match to the public certificate
          jwk-set-uri: ${keycloak.host}/realms/${keycloak.realm}/protocol/openid-connect/certs # url to get the public certificates
          issuer-uri:  ${keycloak.host}/realms/${keycloak.realm}

storage:
  catalogo-videos:
    filename-pattern: type-{type}
    location-pattern: videoId-{videoId}

logging:
  level:
    root: ${log.level_root}
# end config
